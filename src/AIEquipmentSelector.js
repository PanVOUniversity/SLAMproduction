import { useState } from 'react';
import './AIEquipmentSelector.css';

export default function AIEquipmentSelector() {
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [equipmentList, setEquipmentList] = useState(null);
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!query.trim()) return;

    setIsLoading(true);
    setError(null);
    setEquipmentList(null);

    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      
      const mockEquipment = [
        '–ö–æ–Ω—Ü–µ—Ä—Ç–Ω–∞—è –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ JBL SRX835P (2 —à—Ç.)',
        '–ú–∏–∫—à–µ—Ä–Ω—ã–π –ø—É–ª—å—Ç Soundcraft Si Expression 3',
        '–†–∞–¥–∏–æ–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã Shure SM58 (4 —à—Ç.)',
        '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–µ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä—ã Chauvet DJ Intimidator Spot 355 IRC (6 —à—Ç.)',
        '–°–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã–π –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä Martin MAC Quantum Profile (2 —à—Ç.)',
        '–î—ã–º-–º–∞—à–∏–Ω–∞ Antari Z-1200 II',
        '–ü—Ä–æ–µ–∫—Ç–æ—Ä Epson EB-L1755U',
        '–≠–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π 3x4–º',
        '–ö–∞–±–µ–ª–∏ –∏ –∫–æ–º–º—É—Ç–∞—Ü–∏—è',
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ'
      ];

      setEquipmentList(mockEquipment);
    } catch (err) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async () => {
    if (!equipmentList) return;
    
    const text = equipmentList.join('\n');
    try {
      await navigator.clipboard.writeText(text);
      alert('–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    }
  };

  const generateTelegramLink = () => {
    if (!equipmentList) return '#';
    
    const message = `–ü—Ä–∏–≤–µ—Ç! –ú–Ω–µ –Ω—É–∂–µ–Ω –ø–æ–¥–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n${equipmentList.join('\n')}\n\n–ú–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏?`;
    const encodedMessage = encodeURIComponent(message);
    return `https://t.me/vasiliibolotov?text=${encodedMessage}`;
  };

  return (
    <div className="ai-equipment-selector">
      <div className="container">
        <div className="back-link-container">
          <a href="#/" className="back-link">‚Üê –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </div>

        <div className="ai-header">
          <h1 className="ai-title">–ò–ò-–ø–æ–¥–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</h1>
          <p className="ai-subtitle">
            –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏ –Ω–∞—à –ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
          </p>
        </div>

        <div className="ai-content">
          <form className="ai-form" onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="query" className="form-label">
                –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:
              </label>
              <textarea
                id="query"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ü–µ—Ä—Ç —Ä–æ–∫-–≥—Ä—É–ø–ø—ã –Ω–∞ 500 —á–µ–ª–æ–≤–µ–∫ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏. –ù—É–∂–Ω–∞ —Å—Ü–µ–Ω–∞, –∑–≤—É–∫, —Å–≤–µ—Ç, –≤–∏–¥–µ–æ..."
                className="form-textarea"
                rows="6"
                disabled={isLoading}
              />
            </div>
            
            <button 
              type="submit" 
              className="ai-submit-btn"
              disabled={isLoading || !query.trim()}
            >
              {isLoading ? (
                <>
                  <div className="spinner"></div>
                  –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å...
                </>
              ) : (
                '–ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
              )}
            </button>
          </form>

          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          {equipmentList && (
            <div className="equipment-result">
              <h2 className="result-title">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</h2>
              <div className="equipment-list">
                {equipmentList.map((item, index) => (
                  <div key={index} className="equipment-item">
                    <span className="item-number">{index + 1}</span>
                    <span className="item-text">{item}</span>
                  </div>
                ))}
              </div>
              
              <div className="result-actions">
                <button 
                  onClick={copyToClipboard}
                  className="action-btn copy-btn"
                >
                  üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                </button>
                <a 
                  href={generateTelegramLink()}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="action-btn order-btn"
                >
                  üí¨ –ó–∞–∫–∞–∑–∞—Ç—å –≤ Telegram
                </a>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
